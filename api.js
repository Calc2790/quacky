const express = require('express');const router = express.Router();const User = require('../models/User');router.post('/register', validateRegister, createUser);function validateRegister(req, res, next) {  const { username, email, password } = req.body;  const errors = [];  if (!username) errors.push('Username is required');  if (!email) errors.push('Email is required');  if (!password) errors.push('Password is required');  if (errors.length > 0) {    return res.status(400).json({ errors });  }  next();}function createUser(req, res) {  const { username, email, password } = req.body;  const user = new User({ username, email, password });  user.save((err, user) => {    if (err) return res.status(500).json({ message: 'Error creating user' });    res.json({ message: 'User created successfully' });  });}
const express = require('express');const router = express.Router();const User = require('../models/User');const validateToken = require('../middleware/validateToken');router.post('/register', validateRegister, createUser);router.post('/login', validateLogin, loginUser);router.get('/profile', validateToken, getUserProfile);module.exports = router;
router.get('/profile', validateToken, getUserProfile);function validateToken(req, res, next) {  const token = req.headers['x-access-token'];  if (!token) return res.status(401).json({ message: 'Unauthorized' });  next();}function getUserProfile(req, res) {  const userId = req.user._id;  User.findById(userId, (err, user) => {    if (err) return res.status(500).json({ message: 'Error finding user' });    res.json({ username: user.username, email: user.email });  });}
router.put('/profile', validateToken, updateProfile);function updateProfile(req, res) {  const userId = req.user._id;  const updates = req.body;  User.findByIdAndUpdate(userId, updates, { new: true }, (err, user) => {    if (err) return res.status(500).json({ message: 'Error updating user' });    res.json({ message: 'Profile updated successfully' });  });}
router.delete('/delete', validateToken, deleteUser);function deleteUser(req, res) {  const userId = req.user._id;  User.findByIdAndRemove(userId, (err, user) => {    if (err) return res.status(500).json({ message: 'Error deleting user' });    res.json({ message: 'Account deleted successfully' });  });}
router.post('/reset-password', validateResetPassword, sendResetPasswordEmail);function validateResetPassword(req, res, next) {  const { email } = req.body;  const errors = [];  if (!email) errors.push('Email is required');  if (errors.length > 0) {    return res.status(400).json({ errors });  }  next();}function sendResetPasswordEmail(req, res) {  const email = req.body.email;  const resetToken = generateResetToken();  sendEmail(email, resetToken, (err, info) => {    if (err) return res.status(500).json({ message: 'Error sending email' });    res.json({ message: 'Reset password email sent successfully' });  });}
router.put('/reset-password/:resetToken', validateResetPasswordToken, updatePassword);function validateResetPasswordToken(req, res, next) {  const { resetToken } = req.params;  const errors = [];  if (!resetToken) errors.push('Reset token is required');  if (errors.length > 0) {    return res.status(400).json({ errors });  }  next();}function updatePassword(req, res) {  const resetToken = req.params.resetToken;  const newPassword = req.body.newPassword;  User.findOne({ resetToken }, (err, user) => {    if (err) return res.status(500).json({ message: 'Error finding user' });    if (!user) return res.status(401).json({ message: 'Invalid reset token' });    user.setPassword(newPassword, (err) => {      if (err) return res.status(500).json({ message: 'Error updating password' });      res.json({ message: 'Password updated successfully' });    });  });}
